// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  workspace     Workspace[]
}

model Workspace {
  id        String   @id @default(cuid())
  name      String
  bases     Base[]
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Base {
  id              String   @id @default(cuid())
  name            String
  tables          Table[]
  backgroundColor String
  createdAt       DateTime @default(now())

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Table {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  records     Record[]
  fields      Field[]

  baseId String
  base   Base   @relation(fields: [baseId], references: [id], onDelete: Cascade)
}

model Record {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  fields    Json

  tableId String
  table   Table  @relation(fields: [tableId], references: [id], onDelete: Cascade)
}

model Field {
  id          String   @id @default(cuid())
  name        String
  type        String
  description String?
  createdAt   DateTime @default(now())

  tableId String
  table   Table  @relation(fields: [tableId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
